;; This file was automatically generated by the Cyclone Scheme compiler
((stream-match-body lambda (expr$2300$2320 rename$2301$2321 compare$2302$2322) (car ((lambda (tmp$2324$2326) (if tmp$2324$2326 tmp$2324$2326 ((lambda (tmp$2328$2330) (if tmp$2328$2330 tmp$2328$2330 (cons (error/loc "no expansion for" expr$2300$2320) #f))) ((lambda (v.8$2315$2331) (if (pair? v.8$2315$2331) ((lambda (v.9$2316$2333) ((lambda (fail$2334) ((lambda (v.10$2317$2335) (if (pair? v.10$2317$2335) ((lambda (v.11$2318$2337) ((lambda (expr$2338) ((lambda (v.12$2319$2339) (if (null? v.12$2319$2339) (cons expr$2338 #f) #f)) (cdr v.10$2317$2335))) v.11$2318$2337)) (car v.10$2317$2335)) #f)) (cdr v.8$2315$2331))) v.9$2316$2333)) (car v.8$2315$2331)) #f)) (cdr expr$2300$2320))))) ((lambda (v.1$2308$2341) (if (pair? v.1$2308$2341) ((lambda (v.2$2309$2343) ((lambda (fail$2344) ((lambda (v.3$2310$2345) (if (pair? v.3$2310$2345) ((lambda (v.4$2311$2347) ((lambda (fender$2348) ((lambda (v.5$2312$2349) (if (pair? v.5$2312$2349) ((lambda (v.6$2313$2351) ((lambda (expr$2352) ((lambda (v.7$2314$2353) (if (null? v.7$2314$2353) (cons (cons-source (rename$2301$2321 (quote if)) (cons-source fender$2348 (cons-source expr$2352 (cons-source fail$2344 (quote ()) (quote (fail))) (quote (expr fail))) (quote (fender expr fail))) (quote (if fender expr fail))) #f) #f)) (cdr v.5$2312$2349))) v.6$2313$2351)) (car v.5$2312$2349)) #f)) (cdr v.3$2310$2345))) v.4$2311$2347)) (car v.3$2310$2345)) #f)) (cdr v.1$2308$2341))) v.2$2309$2343)) (car v.1$2308$2341)) #f)) (cdr expr$2300$2320))))) (stream-match-one lambda (expr$2095$2141 rename$2096$2142 compare$2097$2143) (car ((lambda (tmp$2145$2147) (if tmp$2145$2147 tmp$2145$2147 ((lambda (tmp$2149$2151) (if tmp$2149$2151 tmp$2149$2151 ((lambda (tmp$2153$2155) (if tmp$2153$2155 tmp$2153$2155 ((lambda (tmp$2157$2159) (if tmp$2157$2159 tmp$2157$2159 (cons (error/loc "no expansion for" expr$2095$2141) #f))) ((lambda (v.30$2132$2160) (if (pair? v.30$2132$2160) ((lambda (v.31$2133$2162) ((lambda (strm$2163) ((lambda (v.32$2134$2164) (if (pair? v.32$2134$2164) ((lambda (v.33$2135$2166) (if (pair? v.33$2135$2166) ((lambda (v.34$2136$2168) ((lambda (a$2169) ((lambda (v.35$2137$2170) ((lambda (body$2171) ((lambda (v.36$2138$2172) (if (pair? v.36$2138$2172) ((lambda (v.37$2139$2174) ((lambda (fail$2175) ((lambda (v.38$2140$2176) (if (null? v.38$2140$2176) (cons (cons-source (rename$2096$2142 (quote let)) (cons-source (cons-source (cons-source a$2169 (cons-source strm$2163 (quote ()) (quote (strm))) (quote (a strm))) (quote ()) (quote ((a strm)))) (cons-source (cons-source (rename$2096$2142 (quote stream-match-body)) (cons-source fail$2175 body$2171 (quote (fail . body))) (quote (stream-match-body fail . body))) (quote ()) (quote ((stream-match-body fail . body)))) (quote (((a strm)) (stream-match-body fail . body)))) (quote (let ((a strm)) (stream-match-body fail . body)))) #f) #f)) (cdr v.36$2138$2172))) v.37$2139$2174)) (car v.36$2138$2172)) #f)) (cdr v.32$2134$2164))) v.35$2137$2170)) (cdr v.33$2135$2166))) v.34$2136$2168)) (car v.33$2135$2166)) #f)) (car v.32$2134$2164)) #f)) (cdr v.30$2132$2160))) v.31$2133$2162)) (car v.30$2132$2160)) #f)) (cdr expr$2095$2141))))) ((lambda (v.19$2121$2178) (if (pair? v.19$2121$2178) ((lambda (v.20$2122$2180) ((lambda (strm$2181) ((lambda (v.21$2123$2182) (if (pair? v.21$2123$2182) ((lambda (v.22$2124$2184) (if (pair? v.22$2124$2184) ((lambda (v.23$2125$2186) (if (pair? v.23$2125$2186) ((lambda (v.24$2126$2188) ((lambda (a$2189) ((lambda (v.25$2127$2190) ((lambda (b$2191) ((lambda (v.26$2128$2192) ((lambda (body$2193) ((lambda (v.27$2129$2194) (if (pair? v.27$2129$2194) ((lambda (v.28$2130$2196) ((lambda (fail$2197) ((lambda (v.29$2131$2198) (if (null? v.29$2131$2198) (cons (cons-source (rename$2096$2142 (quote if)) (cons-source (cons-source (rename$2096$2142 (quote stream-pair?)) (cons-source strm$2181 (quote ()) (quote (strm))) (quote (stream-pair? strm))) (cons-source (cons-source (rename$2096$2142 (quote stream-match-one)) (cons-source (cons-source (rename$2096$2142 (quote stream-car)) (cons-source strm$2181 (quote ()) (quote (strm))) (quote (stream-car strm))) (cons-source (cons-source a$2189 (cons-source (cons-source (rename$2096$2142 (quote stream-match-one)) (cons-source (cons-source (rename$2096$2142 (quote stream-cdr)) (cons-source strm$2181 (quote ()) (quote (strm))) (quote (stream-cdr strm))) (cons-source (cons-source b$2191 body$2193 (quote (b . body))) (cons-source fail$2197 (quote ()) (quote (fail))) (quote ((b . body) fail))) (quote ((stream-cdr strm) (b . body) fail))) (quote (stream-match-one (stream-cdr strm) (b . body) fail))) (quote ()) (quote ((stream-match-one (stream-cdr strm) (b . body) fail)))) (quote (a (stream-match-one (stream-cdr strm) (b . body) fail)))) (cons-source fail$2197 (quote ()) (quote (fail))) (quote ((a (stream-match-one (stream-cdr strm) (b . body) fail)) fail))) (quote ((stream-car strm) (a (stream-match-one (stream-cdr strm) (b . body) fail)) fail))) (quote (stream-match-one (stream-car strm) (a (stream-match-one (stream-cdr strm) (b . body) fail)) fail))) (cons-source fail$2197 (quote ()) (quote (fail))) (quote ((stream-match-one (stream-car strm) (a (stream-match-one (stream-cdr strm) (b . body) fail)) fail) fail))) (quote ((stream-pair? strm) (stream-match-one (stream-car strm) (a (stream-match-one (stream-cdr strm) (b . body) fail)) fail) fail))) (quote (if (stream-pair? strm) (stream-match-one (stream-car strm) (a (stream-match-one (stream-cdr strm) (b . body) fail)) fail) fail))) #f) #f)) (cdr v.27$2129$2194))) v.28$2130$2196)) (car v.27$2129$2194)) #f)) (cdr v.21$2123$2182))) v.26$2128$2192)) (cdr v.22$2124$2184))) v.25$2127$2190)) (cdr v.23$2125$2186))) v.24$2126$2188)) (car v.23$2125$2186)) #f)) (car v.22$2124$2184)) #f)) (car v.21$2123$2182)) #f)) (cdr v.19$2121$2178))) v.20$2122$2180)) (car v.19$2121$2178)) #f)) (cdr expr$2095$2141))))) ((lambda (v.10$2112$2200) (if (pair? v.10$2112$2200) ((lambda (v.11$2113$2202) ((lambda (strm$2203) ((lambda (v.12$2114$2204) (if (pair? v.12$2114$2204) ((lambda (v.13$2115$2206) (if (pair? v.13$2115$2206) ((lambda (v.14$2116$2208) (if (compare$2097$2143 v.14$2116$2208 (rename$2096$2142 (quote _))) ((lambda (v.15$2117$2210) ((lambda (body$2211) ((lambda (v.16$2118$2212) (if (pair? v.16$2118$2212) ((lambda (v.17$2119$2214) ((lambda (fail$2215) ((lambda (v.18$2120$2216) (if (null? v.18$2120$2216) (cons (cons-source (rename$2096$2142 (quote stream-match-body)) (cons-source fail$2215 body$2211 (quote (fail . body))) (quote (stream-match-body fail . body))) #f) #f)) (cdr v.16$2118$2212))) v.17$2119$2214)) (car v.16$2118$2212)) #f)) (cdr v.12$2114$2204))) v.15$2117$2210)) (cdr v.13$2115$2206)) #f)) (car v.13$2115$2206)) #f)) (car v.12$2114$2204)) #f)) (cdr v.10$2112$2200))) v.11$2113$2202)) (car v.10$2112$2200)) #f)) (cdr expr$2095$2141))))) ((lambda (v.1$2103$2218) (if (pair? v.1$2103$2218) ((lambda (v.2$2104$2220) ((lambda (strm$2221) ((lambda (v.3$2105$2222) (if (pair? v.3$2105$2222) ((lambda (v.4$2106$2224) (if (pair? v.4$2106$2224) ((lambda (v.5$2107$2226) (if (null? v.5$2107$2226) ((lambda (v.6$2108$2228) ((lambda (body$2229) ((lambda (v.7$2109$2230) (if (pair? v.7$2109$2230) ((lambda (v.8$2110$2232) ((lambda (fail$2233) ((lambda (v.9$2111$2234) (if (null? v.9$2111$2234) (cons (cons-source (rename$2096$2142 (quote if)) (cons-source (cons-source (rename$2096$2142 (quote stream-null?)) (cons-source strm$2221 (quote ()) (quote (strm))) (quote (stream-null? strm))) (cons-source (cons-source (rename$2096$2142 (quote stream-match-body)) (cons-source fail$2233 body$2229 (quote (fail . body))) (quote (stream-match-body fail . body))) (cons-source fail$2233 (quote ()) (quote (fail))) (quote ((stream-match-body fail . body) fail))) (quote ((stream-null? strm) (stream-match-body fail . body) fail))) (quote (if (stream-null? strm) (stream-match-body fail . body) fail))) #f) #f)) (cdr v.7$2109$2230))) v.8$2110$2232)) (car v.7$2109$2230)) #f)) (cdr v.3$2105$2222))) v.6$2108$2228)) (cdr v.4$2106$2224)) #f)) (car v.4$2106$2224)) #f)) (car v.3$2105$2222)) #f)) (cdr v.1$2103$2218))) v.2$2104$2220)) (car v.1$2103$2218)) #f)) (cdr expr$2095$2141))))) (stream-match-next lambda (expr$2031$2047 rename$2032$2048 compare$2033$2049) (car ((lambda (tmp$2051$2053) (if tmp$2051$2053 tmp$2051$2053 ((lambda (tmp$2055$2057) (if tmp$2055$2057 tmp$2055$2057 (cons (error/loc "no expansion for" expr$2031$2047) #f))) ((lambda (v.4$2042$2058) (if (pair? v.4$2042$2058) ((lambda (v.5$2043$2060) ((lambda (strm$2061) ((lambda (v.6$2044$2062) (if (pair? v.6$2044$2062) ((lambda (v.7$2045$2064) ((lambda (clause$2065) ((lambda (v.8$2046$2066) ((lambda (clauses$2067) (cons (cons-source (rename$2032$2048 (quote let)) (cons-source (cons-source (cons-source (rename$2032$2048 (quote fail)) (cons-source (cons-source (rename$2032$2048 (quote lambda)) (cons-source (quote ()) (cons-source (cons-source (rename$2032$2048 (quote stream-match-next)) (cons-source strm$2061 clauses$2067 (quote (strm . clauses))) (quote (stream-match-next strm . clauses))) (quote ()) (quote ((stream-match-next strm . clauses)))) (quote (() (stream-match-next strm . clauses)))) (quote (lambda () (stream-match-next strm . clauses)))) (quote ()) (quote ((lambda () (stream-match-next strm . clauses))))) (quote (fail (lambda () (stream-match-next strm . clauses))))) (quote ()) (quote ((fail (lambda () (stream-match-next strm . clauses)))))) (cons-source (cons-source (rename$2032$2048 (quote stream-match-one)) (cons-source strm$2061 (cons-source clause$2065 (cons-source (cons-source (rename$2032$2048 (quote fail)) (quote ()) (quote (fail))) (quote ()) (quote ((fail)))) (quote (clause (fail)))) (quote (strm clause (fail)))) (quote (stream-match-one strm clause (fail)))) (quote ()) (quote ((stream-match-one strm clause (fail))))) (quote (((fail (lambda () (stream-match-next strm . clauses)))) (stream-match-one strm clause (fail))))) (quote (let ((fail (lambda () (stream-match-next strm . clauses)))) (stream-match-one strm clause (fail))))) #f)) v.8$2046$2066)) (cdr v.6$2044$2062))) v.7$2045$2064)) (car v.6$2044$2062)) #f)) (cdr v.4$2042$2058))) v.5$2043$2060)) (car v.4$2042$2058)) #f)) (cdr expr$2031$2047))))) ((lambda (v.1$2039$2068) (if (pair? v.1$2039$2068) ((lambda (v.2$2040$2070) ((lambda (strm$2071) ((lambda (v.3$2041$2072) (if (null? v.3$2041$2072) (cons (cons-source (rename$2032$2048 (quote error)) (cons-source "no pattern matched" (quote ()) (quote ("no pattern matched"))) (quote (error "no pattern matched"))) #f) #f)) (cdr v.1$2039$2068))) v.2$2040$2070)) (car v.1$2039$2068)) #f)) (cdr expr$2031$2047))))) (stream-match lambda (expr$1993$2004 rename$1994$2005 compare$1995$2006) (car ((lambda (tmp$2008$2010) (if tmp$2008$2010 tmp$2008$2010 (cons (error/loc "no expansion for" expr$1993$2004) #f))) ((lambda (v.1$2001$2011) (if (pair? v.1$2001$2011) ((lambda (v.2$2002$2013) ((lambda (expr$2014) ((lambda (v.3$2003$2015) (if (list? v.3$2003$2015) ((lambda (clause$2017) (cons (cons-source (rename$1994$2005 (quote let)) (cons-source (cons-source (cons-source (rename$1994$2005 (quote strm)) (cons-source expr$2014 (quote ()) (quote (expr))) (quote (strm expr))) (quote ()) (quote ((strm expr)))) (cons-source (cons-source (rename$1994$2005 (quote assert)) (cons-source (cons-source (rename$1994$2005 (quote stream?)) (cons-source (rename$1994$2005 (quote strm)) (quote ()) (quote (strm))) (quote (stream? strm))) (quote ()) (quote ((stream? strm)))) (quote (assert (stream? strm)))) (cons-source (cons-source (rename$1994$2005 (quote stream-match-next)) (cons-source (rename$1994$2005 (quote strm)) clause$2017 (quote (strm clause ...))) (quote (stream-match-next strm clause ...))) (quote ()) (quote ((stream-match-next strm clause ...)))) (quote ((assert (stream? strm)) (stream-match-next strm clause ...)))) (quote (((strm expr)) (assert (stream? strm)) (stream-match-next strm clause ...)))) (quote (let ((strm expr)) (assert (stream? strm)) (stream-match-next strm clause ...)))) #f)) v.3$2003$2015) #f)) (cdr v.1$2001$2011))) v.2$2002$2013)) (car v.1$2001$2011)) #f)) (cdr expr$1993$2004))))) (stream-of/aux lambda (expr$1475$1521 rename$1476$1522 compare$1477$1523) (car ((lambda (tmp$1525$1527) (if tmp$1525$1527 tmp$1525$1527 ((lambda (tmp$1529$1531) (if tmp$1529$1531 tmp$1529$1531 ((lambda (tmp$1533$1535) (if tmp$1533$1535 tmp$1533$1535 ((lambda (tmp$1537$1539) (if tmp$1537$1539 tmp$1537$1539 (cons (error/loc "no expansion for" expr$1475$1521) #f))) ((lambda (v.32$1514$1540) (if (pair? v.32$1514$1540) ((lambda (v.33$1515$1542) ((lambda (expr$1543) ((lambda (v.34$1516$1544) (if (pair? v.34$1516$1544) ((lambda (v.35$1517$1546) ((lambda (tail$1547) ((lambda (v.36$1518$1548) (if (pair? v.36$1518$1548) ((lambda (v.37$1519$1550) ((lambda (pred$1551) ((lambda (v.38$1520$1552) ((lambda (rest$1553) (cons (cons-source (rename$1476$1522 (quote if)) (cons-source pred$1551 (cons-source (cons-source (rename$1476$1522 (quote stream-of/aux)) (cons-source expr$1543 (cons-source tail$1547 rest$1553 (quote (tail . rest))) (quote (expr tail . rest))) (quote (stream-of/aux expr tail . rest))) (cons-source tail$1547 (quote ()) (quote (tail))) (quote ((stream-of/aux expr tail . rest) tail))) (quote (pred (stream-of/aux expr tail . rest) tail))) (quote (if pred (stream-of/aux expr tail . rest) tail))) #f)) v.38$1520$1552)) (cdr v.36$1518$1548))) v.37$1519$1550)) (car v.36$1518$1548)) #f)) (cdr v.34$1516$1544))) v.35$1517$1546)) (car v.34$1516$1544)) #f)) (cdr v.32$1514$1540))) v.33$1515$1542)) (car v.32$1514$1540)) #f)) (cdr expr$1475$1521))))) ((lambda (v.19$1501$1554) (if (pair? v.19$1501$1554) ((lambda (v.20$1502$1556) ((lambda (expr$1557) ((lambda (v.21$1503$1558) (if (pair? v.21$1503$1558) ((lambda (v.22$1504$1560) ((lambda (tail$1561) ((lambda (v.23$1505$1562) (if (pair? v.23$1505$1562) ((lambda (v.24$1506$1564) (if (pair? v.24$1506$1564) ((lambda (v.25$1507$1566) ((lambda (var$1567) ((lambda (v.26$1508$1568) (if (pair? v.26$1508$1568) ((lambda (v.27$1509$1570) (if (compare$1477$1523 v.27$1509$1570 (rename$1476$1522 (quote is))) ((lambda (v.28$1510$1572) (if (pair? v.28$1510$1572) ((lambda (v.29$1511$1574) ((lambda (e$1575) ((lambda (v.30$1512$1576) (if (null? v.30$1512$1576) ((lambda (v.31$1513$1578) ((lambda (rest$1579) (cons (cons-source (rename$1476$1522 (quote let)) (cons-source (cons-source (cons-source var$1567 (cons-source e$1575 (quote ()) (quote (e))) (quote (var e))) (quote ()) (quote ((var e)))) (cons-source (cons-source (rename$1476$1522 (quote stream-of/aux)) (cons-source expr$1557 (cons-source tail$1561 rest$1579 (quote (tail . rest))) (quote (expr tail . rest))) (quote (stream-of/aux expr tail . rest))) (quote ()) (quote ((stream-of/aux expr tail . rest)))) (quote (((var e)) (stream-of/aux expr tail . rest)))) (quote (let ((var e)) (stream-of/aux expr tail . rest)))) #f)) v.31$1513$1578)) (cdr v.23$1505$1562)) #f)) (cdr v.28$1510$1572))) v.29$1511$1574)) (car v.28$1510$1572)) #f)) (cdr v.26$1508$1568)) #f)) (car v.26$1508$1568)) #f)) (cdr v.24$1506$1564))) v.25$1507$1566)) (car v.24$1506$1564)) #f)) (car v.23$1505$1562)) #f)) (cdr v.21$1503$1558))) v.22$1504$1560)) (car v.21$1503$1558)) #f)) (cdr v.19$1501$1554))) v.20$1502$1556)) (car v.19$1501$1554)) #f)) (cdr expr$1475$1521))))) ((lambda (v.6$1488$1580) (if (pair? v.6$1488$1580) ((lambda (v.7$1489$1582) ((lambda (expr$1583) ((lambda (v.8$1490$1584) (if (pair? v.8$1490$1584) ((lambda (v.9$1491$1586) ((lambda (tail$1587) ((lambda (v.10$1492$1588) (if (pair? v.10$1492$1588) ((lambda (v.11$1493$1590) (if (pair? v.11$1493$1590) ((lambda (v.12$1494$1592) ((lambda (var$1593) ((lambda (v.13$1495$1594) (if (pair? v.13$1495$1594) ((lambda (v.14$1496$1596) (if (compare$1477$1523 v.14$1496$1596 (rename$1476$1522 (quote in))) ((lambda (v.15$1497$1598) (if (pair? v.15$1497$1598) ((lambda (v.16$1498$1600) ((lambda (s$1601) ((lambda (v.17$1499$1602) (if (null? v.17$1499$1602) ((lambda (v.18$1500$1604) ((lambda (rest$1605) (cons (cons-source (rename$1476$1522 (quote stream-let)) (cons-source (rename$1476$1522 (quote lp)) (cons-source (cons-source (cons-source (rename$1476$1522 (quote strm)) (cons-source s$1601 (quote ()) (quote (s))) (quote (strm s))) (quote ()) (quote ((strm s)))) (cons-source (cons-source (rename$1476$1522 (quote if)) (cons-source (cons-source (rename$1476$1522 (quote stream-null?)) (cons-source (rename$1476$1522 (quote strm)) (quote ()) (quote (strm))) (quote (stream-null? strm))) (cons-source tail$1587 (cons-source (cons-source (rename$1476$1522 (quote let)) (cons-source (cons-source (cons-source var$1593 (cons-source (cons-source (rename$1476$1522 (quote stream-car)) (cons-source (rename$1476$1522 (quote strm)) (quote ()) (quote (strm))) (quote (stream-car strm))) (quote ()) (quote ((stream-car strm)))) (quote (var (stream-car strm)))) (quote ()) (quote ((var (stream-car strm))))) (cons-source (cons-source (rename$1476$1522 (quote stream-of/aux)) (cons-source expr$1583 (cons-source (cons-source (rename$1476$1522 (quote lp)) (cons-source (cons-source (rename$1476$1522 (quote stream-cdr)) (cons-source (rename$1476$1522 (quote strm)) (quote ()) (quote (strm))) (quote (stream-cdr strm))) (quote ()) (quote ((stream-cdr strm)))) (quote (lp (stream-cdr strm)))) rest$1605 (quote ((lp (stream-cdr strm)) . rest))) (quote (expr (lp (stream-cdr strm)) . rest))) (quote (stream-of/aux expr (lp (stream-cdr strm)) . rest))) (quote ()) (quote ((stream-of/aux expr (lp (stream-cdr strm)) . rest)))) (quote (((var (stream-car strm))) (stream-of/aux expr (lp (stream-cdr strm)) . rest)))) (quote (let ((var (stream-car strm))) (stream-of/aux expr (lp (stream-cdr strm)) . rest)))) (quote ()) (quote ((let ((var (stream-car strm))) (stream-of/aux expr (lp (stream-cdr strm)) . rest))))) (quote (tail (let ((var (stream-car strm))) (stream-of/aux expr (lp (stream-cdr strm)) . rest))))) (quote ((stream-null? strm) tail (let ((var (stream-car strm))) (stream-of/aux expr (lp (stream-cdr strm)) . rest))))) (quote (if (stream-null? strm) tail (let ((var (stream-car strm))) (stream-of/aux expr (lp (stream-cdr strm)) . rest))))) (quote ()) (quote ((if (stream-null? strm) tail (let ((var (stream-car strm))) (stream-of/aux expr (lp (stream-cdr strm)) . rest)))))) (quote (((strm s)) (if (stream-null? strm) tail (let ((var (stream-car strm))) (stream-of/aux expr (lp (stream-cdr strm)) . rest)))))) (quote (lp ((strm s)) (if (stream-null? strm) tail (let ((var (stream-car strm))) (stream-of/aux expr (lp (stream-cdr strm)) . rest)))))) (quote (stream-let lp ((strm s)) (if (stream-null? strm) tail (let ((var (stream-car strm))) (stream-of/aux expr (lp (stream-cdr strm)) . rest)))))) #f)) v.18$1500$1604)) (cdr v.10$1492$1588)) #f)) (cdr v.15$1497$1598))) v.16$1498$1600)) (car v.15$1497$1598)) #f)) (cdr v.13$1495$1594)) #f)) (car v.13$1495$1594)) #f)) (cdr v.11$1493$1590))) v.12$1494$1592)) (car v.11$1493$1590)) #f)) (car v.10$1492$1588)) #f)) (cdr v.8$1490$1584))) v.9$1491$1586)) (car v.8$1490$1584)) #f)) (cdr v.6$1488$1580))) v.7$1489$1582)) (car v.6$1488$1580)) #f)) (cdr expr$1475$1521))))) ((lambda (v.1$1483$1606) (if (pair? v.1$1483$1606) ((lambda (v.2$1484$1608) ((lambda (expr$1609) ((lambda (v.3$1485$1610) (if (pair? v.3$1485$1610) ((lambda (v.4$1486$1612) ((lambda (tail$1613) ((lambda (v.5$1487$1614) (if (null? v.5$1487$1614) (cons (cons-source (rename$1476$1522 (quote stream-cons)) (cons-source expr$1609 (cons-source tail$1613 (quote ()) (quote (tail))) (quote (expr tail))) (quote (stream-cons expr tail))) #f) #f)) (cdr v.3$1485$1610))) v.4$1486$1612)) (car v.3$1485$1610)) #f)) (cdr v.1$1483$1606))) v.2$1484$1608)) (car v.1$1483$1606)) #f)) (cdr expr$1475$1521))))) (stream-of lambda (expr$1438$1449 rename$1439$1450 compare$1440$1451) (car ((lambda (tmp$1453$1455) (if tmp$1453$1455 tmp$1453$1455 (cons (error/loc "no expansion for" expr$1438$1449) #f))) ((lambda (v.1$1446$1456) (if (pair? v.1$1446$1456) ((lambda (v.2$1447$1458) ((lambda (expr$1459) ((lambda (v.3$1448$1460) ((lambda (clauses$1461) (cons (cons-source (rename$1439$1450 (quote stream-of/aux)) (cons-source expr$1459 (cons-source (rename$1439$1450 (quote stream-null)) clauses$1461 (quote (stream-null . clauses))) (quote (expr stream-null . clauses))) (quote (stream-of/aux expr stream-null . clauses))) #f)) v.3$1448$1460)) (cdr v.1$1446$1456))) v.2$1447$1458)) (car v.1$1446$1456)) #f)) (cdr expr$1438$1449))))) (stream lambda (expr$297$309 rename$298$310 compare$299$311) (car ((lambda (tmp$313$315) (if tmp$313$315 tmp$313$315 ((lambda (tmp$317$319) (if tmp$317$319 tmp$317$319 (cons (error/loc "no expansion for" expr$297$309) #f))) ((lambda (v.2$306$320) (if (pair? v.2$306$320) ((lambda (v.3$307$322) ((lambda (x$323) ((lambda (v.4$308$324) (if (list? v.4$308$324) ((lambda (y$326) (cons (cons-source (rename$298$310 (quote stream-cons)) (cons-source x$323 (cons-source (cons-source (rename$298$310 (quote stream)) y$326 (quote (stream y ...))) (quote ()) (quote ((stream y ...)))) (quote (x (stream y ...)))) (quote (stream-cons x (stream y ...)))) #f)) v.4$308$324) #f)) (cdr v.2$306$320))) v.3$307$322)) (car v.2$306$320)) #f)) (cdr expr$297$309))))) ((lambda (v.1$305$327) (if (null? v.1$305$327) (cons (rename$298$310 (quote stream-null)) #f) #f)) (cdr expr$297$309))))) (stream-let lambda (expr$197$221 rename$198$222 compare$199$223) (car ((lambda (tmp$225$227) (if tmp$225$227 tmp$225$227 (cons (error/loc "no expansion for" expr$197$221) #f))) ((lambda (v.1$205$228) (if (pair? v.1$205$228) ((lambda (v.2$206$230) ((lambda (lp$231) ((lambda (v.3$207$232) (if (pair? v.3$207$232) ((lambda (v.4$208$234) ((lambda (w.5$209$236 name-ls7$211$237 val-ls8$212$238) ((lambda (lp.6$210$239) (set! lp.6$210$239 (lambda (w.5$209$240 name-ls7$211$241 val-ls8$212$242) (if (null? w.5$209$240) ((lambda (name$243 val$244) ((lambda (v.14$218$245) (if (pair? v.14$218$245) ((lambda (v.15$219$247) ((lambda (e0$248) ((lambda (v.16$220$249) (if (list? v.16$220$249) ((lambda (e1$251) (cons (cons-source (cons-source (rename$198$222 (quote letrec)) (cons-source (cons-source (cons-source lp$231 (cons-source (cons-source (rename$198$222 (quote stream-lambda)) (cons-source name$243 (cons-source e0$248 e1$251 (quote (e0 e1 ...))) (quote ((name ...) e0 e1 ...))) (quote (stream-lambda (name ...) e0 e1 ...))) (quote ()) (quote ((stream-lambda (name ...) e0 e1 ...)))) (quote (lp (stream-lambda (name ...) e0 e1 ...)))) (quote ()) (quote ((lp (stream-lambda (name ...) e0 e1 ...))))) (cons-source lp$231 (quote ()) (quote (lp))) (quote (((lp (stream-lambda (name ...) e0 e1 ...))) lp))) (quote (letrec ((lp (stream-lambda (name ...) e0 e1 ...))) lp))) val$244 (quote ((letrec ((lp (stream-lambda (name ...) e0 e1 ...))) lp) val ...))) #f)) v.16$220$249) #f)) (cdr v.14$218$245))) v.15$219$247)) (car v.14$218$245)) #f)) (cdr v.3$207$232))) (reverse name-ls7$211$241) (reverse val-ls8$212$242)) (if (pair? w.5$209$240) ((lambda (v.9$213$253) (if (pair? v.9$213$253) ((lambda (v.10$214$255) ((lambda (name$256) ((lambda (v.11$215$257) (if (pair? v.11$215$257) ((lambda (v.12$216$259) ((lambda (val$260) ((lambda (v.13$217$261) (if (null? v.13$217$261) (lp.6$210$239 (cdr w.5$209$240) (cons name$256 name-ls7$211$241) (cons val$260 val-ls8$212$242)) #f)) (cdr v.11$215$257))) v.12$216$259)) (car v.11$215$257)) #f)) (cdr v.9$213$253))) v.10$214$255)) (car v.9$213$253)) #f)) (car w.5$209$240)) #f)))) (lp.6$210$239 w.5$209$236 name-ls7$211$237 val-ls8$212$238)) #f)) v.4$208$234 (quote ()) (quote ()))) (car v.3$207$232)) #f)) (cdr v.1$205$228))) v.2$206$230)) (car v.1$205$228)) #f)) (cdr expr$197$221))))) (define-stream lambda (expr$141$156 rename$142$157 compare$143$158) (car ((lambda (tmp$160$162) (if tmp$160$162 tmp$160$162 (cons (error/loc "no expansion for" expr$141$156) #f))) ((lambda (v.1$149$163) (if (pair? v.1$149$163) ((lambda (v.2$150$165) (if (pair? v.2$150$165) ((lambda (v.3$151$167) ((lambda (name$168) ((lambda (v.4$152$169) ((lambda (args$170) ((lambda (v.5$153$171) (if (pair? v.5$153$171) ((lambda (v.6$154$173) ((lambda (e0$174) ((lambda (v.7$155$175) (if (list? v.7$155$175) ((lambda (e1$177) (cons (cons-source (rename$142$157 (quote define)) (cons-source name$168 (cons-source (cons-source (rename$142$157 (quote stream-lambda)) (cons-source args$170 (cons-source e0$174 e1$177 (quote (e0 e1 ...))) (quote (args e0 e1 ...))) (quote (stream-lambda args e0 e1 ...))) (quote ()) (quote ((stream-lambda args e0 e1 ...)))) (quote (name (stream-lambda args e0 e1 ...)))) (quote (define name (stream-lambda args e0 e1 ...)))) #f)) v.7$155$175) #f)) (cdr v.5$153$171))) v.6$154$173)) (car v.5$153$171)) #f)) (cdr v.1$149$163))) v.4$152$169)) (cdr v.2$150$165))) v.3$151$167)) (car v.2$150$165)) #f)) (car v.1$149$163)) #f)) (cdr expr$141$156))))) (assert lambda (expr$110$119 rename$111$120 compare$112$121) (car ((lambda (tmp$123$125) (if tmp$123$125 tmp$123$125 (cons (error/loc "no expansion for" expr$110$119) #f))) ((lambda (v.1$118$126) (if (list? v.1$118$126) ((lambda (expr$128) (cons (cons-source (rename$111$120 (quote begin)) (map (lambda (expr$129) (cons-source (rename$111$120 (quote unless)) (cons-source expr$129 (cons-source (cons-source (rename$111$120 (quote error)) (cons-source "assertion failed" (cons-source (cons-source (rename$111$120 (quote quote)) (cons-source expr$129 (quote ()) (quote (expr))) (quote (quote expr))) (quote ()) (quote ((quote expr)))) (quote ("assertion failed" (quote expr)))) (quote (error "assertion failed" (quote expr)))) (quote ()) (quote ((error "assertion failed" (quote expr))))) (quote (expr (error "assertion failed" (quote expr))))) (quote (unless expr (error "assertion failed" (quote expr)))))) expr$128) (quote (begin (unless expr (error "assertion failed" (quote expr))) ...))) #f)) v.1$118$126) #f)) (cdr expr$110$119))))) (stream-lambda lambda (expr$63$76 rename$64$77 compare$65$78) (car ((lambda (tmp$80$82) (if tmp$80$82 tmp$80$82 (cons (error/loc "no expansion for" expr$63$76) #f))) ((lambda (v.1$71$83) (if (pair? v.1$71$83) ((lambda (v.2$72$85) ((lambda (formals$86) ((lambda (v.3$73$87) (if (pair? v.3$73$87) ((lambda (v.4$74$89) ((lambda (body0$90) ((lambda (v.5$75$91) (if (list? v.5$75$91) ((lambda (body1$93) (cons (cons-source (rename$64$77 (quote lambda)) (cons-source formals$86 (cons-source (cons-source (rename$64$77 (quote make-stream)) (cons-source (cons-source (rename$64$77 (quote delay-force)) (cons-source (cons-source (rename$64$77 (quote stream-promise)) (cons-source (cons-source (rename$64$77 (quote let)) (cons-source (quote ()) (cons-source body0$90 body1$93 (quote (body0 body1 ...))) (quote (() body0 body1 ...))) (quote (let () body0 body1 ...))) (quote ()) (quote ((let () body0 body1 ...)))) (quote (stream-promise (let () body0 body1 ...)))) (quote ()) (quote ((stream-promise (let () body0 body1 ...))))) (quote (delay-force (stream-promise (let () body0 body1 ...))))) (quote ()) (quote ((delay-force (stream-promise (let () body0 body1 ...)))))) (quote (make-stream (delay-force (stream-promise (let () body0 body1 ...)))))) (quote ()) (quote ((make-stream (delay-force (stream-promise (let () body0 body1 ...))))))) (quote (formals (make-stream (delay-force (stream-promise (let () body0 body1 ...))))))) (quote (lambda formals (make-stream (delay-force (stream-promise (let () body0 body1 ...))))))) #f)) v.5$75$91) #f)) (cdr v.3$73$87))) v.4$74$89)) (car v.3$73$87)) #f)) (cdr v.1$71$83))) v.2$72$85)) (car v.1$71$83)) #f)) (cdr expr$63$76))))) (stream-cons lambda (expr$11$24 rename$12$25 compare$13$26) (car ((lambda (tmp$28$30) (if tmp$28$30 tmp$28$30 (cons (error/loc "no expansion for" expr$11$24) #f))) ((lambda (v.1$19$31) (if (pair? v.1$19$31) ((lambda (v.2$20$33) ((lambda (object$34) ((lambda (v.3$21$35) (if (pair? v.3$21$35) ((lambda (v.4$22$37) ((lambda (stream$38) ((lambda (v.5$23$39) (if (null? v.5$23$39) (cons (cons-source (rename$12$25 (quote make-stream)) (cons-source (cons-source (rename$12$25 (quote make-promise)) (cons-source (cons-source (rename$12$25 (quote make-stream-pair)) (cons-source (cons-source (rename$12$25 (quote delay)) (cons-source object$34 (quote ()) (quote (object))) (quote (delay object))) (cons-source (cons-source (rename$12$25 (quote delay-force)) (cons-source (cons-source (rename$12$25 (quote stream-promise)) (cons-source stream$38 (quote ()) (quote (stream))) (quote (stream-promise stream))) (quote ()) (quote ((stream-promise stream)))) (quote (delay-force (stream-promise stream)))) (quote ()) (quote ((delay-force (stream-promise stream))))) (quote ((delay object) (delay-force (stream-promise stream))))) (quote (make-stream-pair (delay object) (delay-force (stream-promise stream))))) (quote ()) (quote ((make-stream-pair (delay object) (delay-force (stream-promise stream)))))) (quote (make-promise (make-stream-pair (delay object) (delay-force (stream-promise stream)))))) (quote ()) (quote ((make-promise (make-stream-pair (delay object) (delay-force (stream-promise stream))))))) (quote (make-stream (make-promise (make-stream-pair (delay object) (delay-force (stream-promise stream))))))) #f) #f)) (cdr v.3$21$35))) v.4$22$37)) (car v.3$21$35)) #f)) (cdr v.1$19$31))) v.2$20$33)) (car v.1$19$31)) #f)) (cdr expr$11$24))))))